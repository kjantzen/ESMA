%study_TrialReject() - GUI for automatically marking trials as bad using 
%                           several EEGLAB routines.  
%
%                           Classifies trials based on threshold, kurtosis
%                           linear trend and joint probability.  Trials
%                           labelled as bad are added to teh EEG.reject
%                           stucture.
%Usaage:
%>> study_TrialReject(filenames);
%
%Required Inputs:
%   filenames   -   a cell array of filenames to review.  The routine
%                   automatically assumes one filename for each participant 
%                   listed in the study structure.

% Update 5/13/20 KJ Jantzen
function h = study_TrialReject(filenames)

scheme = eeg_LoadScheme;
W = 450; H = 400;
figpos = [(scheme.ScreenWidth-W)/2,(scheme.ScreenHeight-H)/2, W, H];

handles.figure = uifigure(...
    'Color', scheme.Window.BackgroundColor.Value,...
    'Position', figpos,...
    'NumberTitle', 'off',...
    'Menubar','none',...
    'Name', 'Mark bad trials',...
    'WindowStyle','modal');
h = handles.figure;

handles.uipanel1 = uipanel(...
    'Parent', handles.figure,...
    'Title','Mark trials by:',...
    'BackgroundColor',scheme.Panel.BackgroundColor.Value,...
    'FontName', scheme.Panel.Font.Value,...
    'ForegroundColor',scheme.Panel.FontColor.Value,...
    'FontSize', scheme.Panel.FontSize.Value,...
    'Position',[10, 110, 430, 280]);

handles.uipanel2 = uipanel(...
    'Parent', handles.figure,...
    'BackgroundColor',scheme.Panel.BackgroundColor.Value,...
    'FontName', scheme.Panel.Font.Value,...
    'ForegroundColor',scheme.Panel.FontColor.Value,...
    'FontSize', scheme.Panel.FontSize.Value,...
    'Position',[10, 40, 430, 60]);
%**************************************************************************

handles.rejtype(1) = uicheckbox(...
    'Parent', handles.uipanel1, ...
    'Text', 'Threshold',...
    'Value', 1,...
    'Position', [10, 200, 100, 20],...
    'FontName', scheme.Checkbox.Font.Value,...
    'FontSize', scheme.Checkbox.FontSize.Value,...
    'FontColor',scheme.Checkbox.FontColor.Value);

handles.rejtype(2) = uicheckbox(...
    'Parent', handles.uipanel1, ...
    'Text', 'Kurtosis',...
    'Value', 1,...
    'Position', [10, 140, 100, 20],...
    'FontName', scheme.Checkbox.Font.Value,...
    'FontSize', scheme.Checkbox.FontSize.Value,...
    'FontColor',scheme.Checkbox.FontColor.Value);

handles.rejtype(3) = uicheckbox(...
    'Parent', handles.uipanel1, ...
    'Text', 'Trend',...
    'Value', 1,...
    'Position', [10,80, 100, 20],...
    'FontName', scheme.Checkbox.Font.Value,...
    'FontSize', scheme.Checkbox.FontSize.Value,...
    'FontColor',scheme.Checkbox.FontColor.Value);    

handles.rejtype(4) = uicheckbox(...
    'Parent', handles.uipanel1, ...
    'Text', 'Joint Probablity',...
    'Value', 1,...
    'Position', [10, 20, 150, 20],...
    'FontName', scheme.Checkbox.Font.Value,...
    'FontSize', scheme.Checkbox.FontSize.Value,...
    'FontColor',scheme.Checkbox.FontColor.Value);
    
handles.overwrite = uicheckbox(...
    'Parent', handles.uipanel2, ...
    'Text', 'Replace existing status markers?',...
    'value', 1,...
    'Position', [10, 20, 250, 20],...
    'FontName', scheme.Checkbox.Font.Value,...
    'FontSize', scheme.Checkbox.FontSize.Value,...
    'FontColor',scheme.Checkbox.FontColor.Value);    

handles.edit_threshrange = uieditfield(...
    handles.uipanel1, 'numeric', ...
    'Position', [130, 200, 80, 20'],...
    'BackgroundColor', scheme.Edit.BackgroundColor.Value,...
    'FontColor', scheme.Edit.FontColor.Value,...
    'FontName', scheme.Edit.Font.Value,...
    'FontSize', scheme.Edit.FontSize.Value,...
    'Limits', [0, inf],...
    'RoundFractionalValue', 'on',...
    'Value', 500,...
    'ValueDisplayFormat', ['%i ', char(181),'V']);

uilabel('Parent', handles.uipanel1,...
    'Position', [220, 200, 80, 20], ...
    'Text', '+- range',...
    'FontName', scheme.Label.Font.Value,...
    'FontSize', scheme.Label.FontSize.Value,...
    'FontColor', scheme.Label.FontColor.Value);

handles.edit_kurtrange = uieditfield(...
    handles.uipanel1, 'numeric', ...
    'Position', [130, 140, 80, 20'],...
    'BackgroundColor', scheme.Edit.BackgroundColor.Value,...
    'FontColor', scheme.Edit.FontColor.Value,...
    'FontName', scheme.Edit.Font.Value,...
    'FontSize', scheme.Edit.FontSize.Value,...
    'Value', 6,...
    'Limits', [1, inf],...
    'RoundFractionalValue', 'on',...
    'ValueDisplayFormat', '%i sd');

uilabel('Parent', handles.uipanel1,...
    'Position', [220, 140, 200, 20'], ...
    'Text', 'limits (std. dev.)',...
    'FontName', scheme.Label.Font.Value,...
    'FontSize', scheme.Label.FontSize.Value,...
    'FontColor', scheme.Label.FontColor.Value);

handles.edit_trendwinsize = uieditfield(...
    handles.uipanel1, 'numeric', ...
    'Position', [130, 80, 80, 20],...
    'BackgroundColor', scheme.Edit.BackgroundColor.Value,...
    'FontColor', scheme.Edit.FontColor.Value,...
    'FontName', scheme.Edit.Font.Value,...
    'FontSize', scheme.Edit.FontSize.Value,...
    'Value', 0,...
    'Limits', [0, inf],...
    'RoundFractionalValue', 'on',...
    'ValueDisplayFormat', '%i pnts');

uilabel('Parent', handles.uipanel1,...
    'Position', [130, 98, 200, 20], ...
    'Text', 'window (0=all)',...
    'FontName', scheme.Label.Font.Value,...
    'FontSize', scheme.Label.FontSize.Value,...
    'FontColor', scheme.Label.FontColor.Value);

handles.edit_trendslope = uieditfield(...
    handles.uipanel1, 'numeric', ...
    'Position', [225, 80, 80, 20'],...
    'BackgroundColor', scheme.Edit.BackgroundColor.Value,...
    'FontColor', scheme.Edit.FontColor.Value,...
    'FontName', scheme.Edit.Font.Value,...
    'FontSize', scheme.Edit.FontSize.Value,...
    'Value', .5,...
    'Limits', [0, inf],...
    'RoundFractionalValue', 'off',...
    'ValueDisplayFormat', ['%0.1f ', char(181),'V/sec']);

uilabel('Parent', handles.uipanel1,...
    'Position', [225, 98, 200, 20], ...
    'Text', 'slope',...
    'FontName', scheme.Label.Font.Value,...
    'FontSize', scheme.Label.FontSize.Value,...
    'FontColor', scheme.Label.FontColor.Value);

handles.edit_trendrsqr = uieditfield(...
    handles.uipanel1, 'numeric', ...
    'Position', [320, 80, 80, 20'],...
    'BackgroundColor', scheme.Edit.BackgroundColor.Value,...
    'FontColor', scheme.Edit.FontColor.Value,...
    'FontName', scheme.Edit.Font.Value,...
    'FontSize', scheme.Edit.FontSize.Value,...
    'Value', .3,...
    'Limits', [0, 1],...
    'RoundFractionalValue', 'off',...
    'ValueDisplayFormat', '%0.1f');

uilabel('Parent', handles.uipanel1,...
    'Position', [320, 98, 200, 20], ...
    'Text', 'r sqr limit',...
    'FontName', scheme.Label.Font.Value,...
    'FontSize', scheme.Label.FontSize.Value,...
    'FontColor', scheme.Label.FontColor.Value);

handles.edit_jprange = uieditfield(...
    handles.uipanel1, 'numeric', ...
    'Position', [130, 20, 80, 20'],...
    'BackgroundColor', scheme.Edit.BackgroundColor.Value,...
    'FontColor', scheme.Edit.FontColor.Value,...
    'FontName', scheme.Edit.Font.Value,...
    'FontSize', scheme.Edit.FontSize.Value,...
    'Value', 6,...
    'Limits', [1, inf],...
    'RoundFractionalValue', 'on',...
    'ValueDisplayFormat', '%i sd');

uilabel('Parent', handles.uipanel1,...
    'Position', [220, 20, 200, 20], ...
    'Text', 'limits (std. dev.)',...
    'FontName', scheme.Label.Font.Value,...
    'FontSize', scheme.Label.FontSize.Value,...
    'FontColor', scheme.Label.FontColor.Value);

handles.button_compute = uibutton(...
    'Parent', handles.figure,...
    'Text', 'Mark Trials',...
    'Position', [W-110, 5, 100, 25],...
    'BackgroundColor', scheme.Button.BackgroundColor.Value,...
    'FontColor', scheme.Button.FontColor.Value,...
    'FontName', scheme.Button.Font.Value,...
    'FontSize', scheme.Button.FontSize.Value);

handles.button_cancel = uibutton(...
    'Parent', handles.figure,...
    'Text', 'Cancel',...
    'Position', [W-220, 5, 100, 25],...
    'BackgroundColor', scheme.Button.BackgroundColor.Value,...
    'FontColor', scheme.Button.FontColor.Value,...
    'FontName', scheme.Button.Font.Value,...
    'FontSize', scheme.Button.FontSize.Value);

handles.button_compute.ButtonPushedFcn = {@callback_AutoReject, handles, filenames};
handles.button_cancel.ButtonPushedFcn = {@callback_closefig};

% ***********************************************************************
function callback_closefig(hObject, eventdata)
closereq();

%**********************************************
function callback_AutoReject  (hObject, eventdata, h, fnames)

%Get the user options
for ii = 1:4
    RejType(ii) = get(h.rejtype(ii), 'value');
end

thresh_range = h.edit_threshrange.Value;
kurt_limit = h.edit_kurtrange.Value;
jp_limit = h.edit_jprange.Value;
trend_winsize = h.edit_trendwinsize.Value;
trend_slope = h.edit_trendslope.Value;
trend_rsqr = h.edit_trendrsqr.Value;



Overwrite = get(h.overwrite, 'value');

%set a progress bar


pb = uiprogressdlg(h.figure, 'Title', 'Marking bad trials', 'Message', 'starting', 'ShowPercentage', 'on');

    for jj = 1:length(fnames)
 
        
        [fpath,fname,fext] = fileparts(fnames{jj});        
        EEG = wwu_LoadEEGFile(fnames{jj});
        
        if trend_winsize > EEG.pnts || trend_winsize==0
            trend_winpnts = EEG.pnts;
        end
        fprintf('trend removal will use the entire epoch window\n')
        
        %now autoreject the worst of the trials
        %assume all the channels will be used and that rejection will be
        %done using channels and not ICA
        chanlist = 1:EEG.nbchan;
        rej_type = 1;
        
        
        x = study_GetBadTrials(EEG);
        if sum(x)>0
            fprintf('shit dude, some bad trials have already been marked!\n');
        end
        
        %elimimate all existing bad trials for a fresh start.
        if Overwrite
            EEG.reject.rejthresh = [];
            EEG.reject.rejkurt = [];
            EEG.reject.rejconst = [];
            EEG.reject.rejjp = [];
        end
        
        pb.Message = 'marking by threshold...';    
        if RejType(1)==1; EEG = pop_eegthresh(EEG, rej_type, chanlist, -thresh_range, thresh_range, EEG.xmin, EEG.xmax, 0, 0); end
        pb.Message = 'marking by kurtosis...';
        if RejType(2)==1; EEG = pop_rejkurt(EEG, rej_type, chanlist, kurt_limit, kurt_limit, 0, 0, 0); end
        pb.Message = 'marking by trend...';
        if RejType(3)==1; EEG = pop_rejtrend(EEG, rej_type, chanlist, trend_winpnts, trend_slope, trend_rsqr, 0, 0,0); end
        pb.Message = 'marking by joint probablity...';
        if RejType(4)==1; EEG = pop_jointprob(EEG, rej_type, chanlist, trend_winsize, jp_limit,jp_limit,0,0,0); end
 
    
        pb.Message = 'saving results...';
      %  save(fnames{jj}, 'EEG', '-mat', '-v6');
        wwu_SaveEEGFile(EEG, fnames{jj})
        
        pb.Value = jj/length(fnames);
    end
    
   callback_closefig(hObject, eventdata, h);
    