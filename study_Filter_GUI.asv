function study_Filter_GUI(InputStudy)

%this  is to account for the fact that eeglab will change this setting
set(0,'units', 'pixels');

global EEGPath;
EEGPath = study_GetEEGPath;

global STUDYPATH;
STUDYPATH = fullfile(EEGPath, 'STUDIES');

HCND_BACKCOLOR = [193/255, 205/255, 193/255];
HCND_INFOCOLOR = [45/255,45/255,200/255];

scrsize = get(0, 'ScreenSize');
Wdth = 550; Hght = 400;
Bttn_HalfWidth = 20;
Bttn_HalfHeight = 18;
LBHeight = Hght * .95;

%setup the main figure window
handles.figure = figure;
h = handles.figure;
set(handles.figure,...
    'color', HCND_BACKCOLOR, ...
    'name', 'Data Filtering',...
    'NumberTitle', 'off',...
    'position', [(scrsize(3)-Wdth)/2,(scrsize(4)-Hght)/2,Wdth,Hght],...
    'Resize', 'off',...
    'menubar', 'none');

handles.uipanel1 = uipanel(...
    'Title','Study Information',...
    'FontSize',10,...
    'BackgroundColor',HCND_BACKCOLOR,...
    'Position',[.05, .5, .9, .45]);

handles.uipanel2 = uipanel(...
    'Title','Filter Settings',...
    'FontSize',10,...
    'BackgroundColor',HCND_BACKCOLOR,...
    'Position',[.05, .15, .9, .3]);

%*************************************************************************
handles.label_studyinfo = uicontrol('Parent', handles.uipanel1, ...
    'Style', 'text', ...
    'String', '',...
    'FontSize', 10,...
    'units', 'pixels',...
    'HorizontalAlignment', 'left', ...
    'BackGroundColor', HCND_BACKCOLOR, ...
    'ForeGroundColor', HCND_INFOCOLOR,...
    'Position', [10, 10, 350, 140]);
%**************************************************************************
handles.edit_filtrange = uicontrol('Parent', handles.uipanel2, ...
    'Style', 'edit', ...
    'String', '1    50',...
    'FontSize', 10,...
    'units', 'pixels',...
    'HorizontalAlignment', 'center', ...
    'BackGroundColor', 'w', ...
    'Position', [175, 20, 100, 20]);

uicontrol('Parent', handles.uipanel2, ...
    'Style', 'text', ...
    'String', sprintf('Filter Range [min max]:'),...
    'Enable', 'on', ...
    'FontSize', 10,...
    'HorizontalAlignment', 'left', ...
    'BackGroundColor', HCND_BACKCOLOR, ...
    'Position', [10, 20, 150, 20]);


handles.button_compute = uicontrol('Style', 'pushbutton', 'String', 'Filter',...
    'Position', [30, 20, 200, Bttn_HalfHeight * 2],...
    'Callback', {@callback_Filter, handles});



handles.menuh = uimenu('Label', 'File');
uimenu(handles.menuh, 'Label', 'Load Study', 'callback', {@callback_loadstudy, handles});
uimenu(handles.menuh, 'Label', 'Exit', 'callback', {@callback_exit, handles}, 'Separator', 'on');

%if no study has been identified then prompt the user to load one
if nargin < 1
    callback_loadstudy(0,0,handles)
else
    LoadExistingStudy(handles, InputStudy);
end


%*************************************************************************
function callback_loadstudy(hObject, eventdata, h)

studytoload = study_SelectStudy;
if isempty(studytoload)
    return
end
LoadExistingStudy(h, studytoload);
%**************************************************************************
function callback_exit(hObject, eventdata, h)
close(h.figure)

%*************************************************************************
function study = LoadExistingStudy(h, StudyName)

global STUDYPATH
sn = fullfile(STUDYPATH, StudyName);
if isempty(dir(sn))
    msgbox(sprintf('The specified study %s does not exist.', StudyName));
    return
else
    load(sn, '-mat');
    setstudy(study,h);
    
end

%*************************************************************************
function setstudy(study, h)
set(h.figure, 'UserData', study);
display_studyinfo(study, h)
pause(0.1);
%*************************************************************************
function study = getstudy(h)
study = get(h.figure, 'UserData');
if isempty(study);
    msgbox('Error.  No study information is available');
    return
end
%*************************************************************************
function display_studyinfo(study, h)

mystr = sprintf('Study:\t\t%s\n', study.name);
mystr = [mystr,sprintf('Path:\t\t%s\n', study.path)];
mystr = [mystr,sprintf('Filename:\t\t%s\n', study.filename)];
mystr = [mystr, sprintf('Conditions:\t\t%i\n', study.nconditions)];
mystr = [mystr, sprintf('Participants:\t\t%i\n\n', study.nsubjects)];
mystr = [mystr, sprintf('Description:\t\t%s\n', study.description)];

set(h.label_studyinfo, 'string', mystr);

%*************************************************************************
%this is the start of the module specific functions
%*************************************************************************


%**********************************************
function callback_Filter  (src, eventdata, h)


global EEGPath;

%get current study information
study = getstudy(h);

%make sure the study has some subjects in it
if study.nsubjects < 1
    msgbox('No subjects are listed in your study','ICA Error', 'error');
    return
end

%get the user to specify the files to process
fnames = study_SelectDataToProcess(study, 'Filter', {'*.set'}, 'Caption', 'Select files for ICA');
if isempty(fnames)
    fprintf('\nNo file names selected\n');
    return
end



    frange = str2num(get(h.edit_filtrange, 'string'));
    if length(frange)<2 || length(frange)>2
        msgbox('Please enter a valid filter range');
        return
    end
    if frange(1) >= frange(2)
        msgbox('Filter range must be entered in the form [min freq, max freq]')
        return
    end


%set a progress bar
waithandle = statusbar('Filtering data...');
max_ops = study.nsubjects;

op_count = 0;
ChanArray= [];


%loop through each subject in the study
for ii = 1:study.nsubjects
    
    op_count = op_count+1;
    
    
    fpath = wwu_buildpath(EEGPath, study.path, study.subject(ii).path);
    
    if isempty(statusbar(op_count/max_ops,waithandle))
        delete(statusbar);
        fprintf('\noperation terminated by user\n');
        return
    end
    
    %load the files for this specific participant into a single data array
  
    
   
    for jj = 1:length(fnames)
        EEGIn = pop_loadset('filepath', fpath, 'filename', fnames{jj});
        fprintf('Filtering the data\n');
        EEGIn = pop_iirfilt( EEGIn, frange(1), frange(2), [], 0);
        EEGIn = pop_saveset( EEGIn,  'filename',fnames{jj}, 'filepath', fpath);
    end
    
    clear EEGIn
end

delete(statusbar);
