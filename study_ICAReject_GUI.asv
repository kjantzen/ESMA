function study_ICAReject_GUI(InputStudy)

%this  is to account for the fact that eeglab will change this setting
set(0,'units', 'pixels');

global EEGPath;
EEGPath = study_GetEEGPath;

global STUDYPATH;
global TMPREJ;
global trialrej;
global elecrej;

STUDYPATH = fullfile(EEGPath, 'STUDIES');

HCND_BACKCOLOR = [193/255, 205/255, 193/255];
HCND_INFOCOLOR = [45/255,45/255,200/255];

scrsize = get(0, 'ScreenSize');
Wdth = scrsize(3)/4; Hght = 400;
Bttn_HalfWidth = 20;
Bttn_HalfHeight = 18;
LBHeight = Hght * .95;

%setup the main figure window
handles.figure = figure;
h = handles.figure;
set(handles.figure,...
    'color', HCND_BACKCOLOR, ...
    'name', 'Automated and Manual Trial Rejection',...
    'NumberTitle', 'off',...
    'position', [(scrsize(3)-Wdth)/2,(scrsize(4)-Hght)/2,Wdth,Hght],...
    'Resize', 'off',...
    'menubar', 'none');

handles.uipanel1 = uipanel(...
    'Title','Study Information',...
    'FontSize',10,...
    'BackgroundColor',HCND_BACKCOLOR,...
    'Position',[.05, .6, .9, .35]);

handles.uipanel2 = uipanel(...
    'Title','Independent Component Analysis Options',...
    'FontSize',10,...
    'BackgroundColor',HCND_BACKCOLOR,...
    'Position',[.05, .15, .9, .4]);

%*************************************************************************
handles.label_studyinfo = uicontrol('Parent', handles.uipanel1, ...
    'Style', 'text', ...
    'String', '',...
    'FontSize', 10,...
    'units', 'pixels',...
    'HorizontalAlignment', 'left', ...
    'BackGroundColor', HCND_BACKCOLOR, ...
    'ForeGroundColor', HCND_INFOCOLOR,...
    'Position', [10, 10, 350, 100]);
%**************************************************************************
uicontrol('Parent', handles.uipanel2, ...
    'Style', 'text', ...
    'String', 'Reject Trials by:',...
    'FontSize', 10,...
    'units', 'pixels',...
    'HorizontalAlignment', 'left', ...
    'BackGroundColor', HCND_BACKCOLOR, ...
    'ForeGroundColor', 'k',...
    'Position', [10, 120, 350, 20]);

handles.rejtype(1) = uicontrol('Parent', handles.uipanel2, ...
    'Style', 'checkbox', ...
    'String', 'Threshold',...
    'FontSize', 10,...
    'value', 1,...
    'units', 'pixels',...
    'HorizontalAlignment', 'left', ...
    'BackGroundColor', HCND_BACKCOLOR, ...
    'Position', [10, 100, 100, 20]);

handles.rejtype(2) = uicontrol('Parent', handles.uipanel2, ...
    'Style', 'checkbox', ...
    'String', 'Kurtosis',...
    'FontSize', 10,...
    'value', 1,...
    'units', 'pixels',...
    'HorizontalAlignment', 'left', ...
    'BackGroundColor', HCND_BACKCOLOR, ...
    'Position', [100, 100, 100, 20]);

handles.rejtype(3) = uicontrol('Parent', handles.uipanel2, ...
    'Style', 'checkbox', ...
    'String', 'Trend',...
    'FontSize', 10,...
    'value', 1,...
    'units', 'pixels',...
    'HorizontalAlignment', 'left', ...
    'BackGroundColor', HCND_BACKCOLOR, ...
    'Position', [190, 100, 100, 20]);

handles.rejtype(4) = uicontrol('Parent', handles.uipanel2, ...
    'Style', 'checkbox', ...
    'String', 'Joint Probability',...
    'FontSize', 10,...
    'value', 1,...
    'units', 'pixels',...
    'HorizontalAlignment', 'left', ...
    'BackGroundColor', HCND_BACKCOLOR, ...
    'Position', [280, 100, 100, 20]);

handles.rejectICA = uicontrol('Parent', handles.uipanel2, ...
    'Style', 'checkbox', ...
    'String', 'Perform Rejection on ICA components',...
    'FontSize', 10,...
    'value', 1,...
    'units', 'pixels',...
    'HorizontalAlignment', 'left', ...
    'BackGroundColor', HCND_BACKCOLOR, ...
    'Position', [10, 60, 300, 20]);

handles.ignorebad = uicontrol('Parent', handles.uipanel2, ...
    'Style', 'checkbox', ...
    'String', 'Ignore Bad Subjects?',...
    'FontSize', 10,...
    'value', 1,...
    'units', 'pixels',...
    'HorizontalAlignment', 'left', ...
    'BackGroundColor', HCND_BACKCOLOR, ...
    'Position', [10, 40, 250, 20]);

handles.overwrite = uicontrol('Parent', handles.uipanel2, ...
    'Style', 'checkbox', ...
    'String', 'Overwrite Existing output files?',...
    'FontSize', 10,...
    'value', 1,...
    'units', 'pixels',...
    'HorizontalAlignment', 'left', ...
    'BackGroundColor', HCND_BACKCOLOR, ...
    'Position', [10, 20, 200, 20]);



handles.button_compute = uicontrol('Style', 'pushbutton', 'String', 'Perform Rejection',...
    'Position', [30, 20, 200, Bttn_HalfHeight * 2],...
    'Callback', {@callback_ComputeICA, handles});



handles.menuh = uimenu('Label', 'File');
uimenu(handles.menuh, 'Label', 'Load Study', 'callback', {@callback_loadstudy, handles});
uimenu(handles.menuh, 'Label', 'Exit', 'callback', {@callback_exit, handles}, 'Separator', 'on');

%if no study has been identified then prompt the user to load one
if nargin < 1
    callback_loadstudy(0,0,handles)
else
    LoadExistingStudy(handles, InputStudy);
end


%*************************************************************************
function callback_loadstudy(hObject, eventdata, h)

studytoload = study_SelectStudy;
if isempty(studytoload)
    return
end
LoadExistingStudy(h, studytoload);
%**************************************************************************
function callback_exit(hObject, eventdata, h)
close(h.figure)

%*************************************************************************
function study = LoadExistingStudy(h, StudyName)

global STUDYPATH
sn = fullfile(STUDYPATH, StudyName);
if isempty(dir(sn))
    msgbox(sprintf('The specified study %s does not exist.', StudyName));
    return
else
    load(sn, '-mat');
    setstudy(study,h);
    
end

%*************************************************************************
function setstudy(study, h)
set(h.figure, 'UserData', study);
display_studyinfo(study, h)
pause(0.1);
%*************************************************************************
function study = getstudy(h)
study = get(h.figure, 'UserData');
if isempty(study);
    msgbox('Error.  No study information is available');
    return
end
%*************************************************************************
function display_studyinfo(study, h)

mystr = sprintf('Study:\t\t%s\n', study.name);
mystr = [mystr,sprintf('Path:\t\t%s\n', study.path)];
mystr = [mystr,sprintf('Filename:\t\t%s\n', study.filename)];
mystr = [mystr, sprintf('Conditions:\t\t%i\n', study.nconditions)];
mystr = [mystr, sprintf('Participants:\t\t%i\n\n', study.nsubjects)];
mystr = [mystr, sprintf('Description:\t\t%s\n', study.description)];

set(h.label_studyinfo, 'string', mystr);

%*************************************************************************
%this is the start of the module specific functions
%*************************************************************************


%**********************************************
function callback_ComputeICA  (src, eventdata, h)


global EEGPath;

%get current study information
study = getstudy(h);

%make sure the study has some subjects in it
if study.nsubjects < 1
    msgbox('No subjects are listed in your study','ICA Error', 'error');
    return
end

%get the user to specify the files to process
fnames = study_SelectDataToProcess(study, 'Filter', {'*.set'}, 'Caption', 'Select files for trial rejection');
if isempty(fnames)
    fprintf('\nNo file names selected\n');
    return
end

%Get the user options
for ii = 1:4
    RejType(ii) = get(h.rejtype(ii), 'value');
end
RejectICA = get(h.rejectICA, 'value');
IgnoreBad = get(h.ignorebad, 'value');
Overwrite = get(h.overwrite, 'value');

%set a progress bar
waithandle = statusbar('Computing ICA...');
max_ops = study.nsubjects * length(fnames);

op_count = 0;

%this is so that the window can be presented full size on the screen
unt = get(0, 'units');
set(0,'units', 'pixels');
scrnsze = get(0, 'ScreenSize');

%loop through each subject in the study
for ii = 1:study.nsubjects
    
    
    fpath = wwu_buildpath(EEGPath, study.path, study.subject(ii).path);
    
    %load the files for this specific participant into a single data array
    for jj = 1:length(fnames)
        
        op_count = op_count+1;
        
        if isempty(statusbar(op_count/max_ops,waithandle))
            delete(statusbar);
            fprintf('\noperation terminated by user\n');
            return
        end
        
        [~,F,X] = fileparts(fnames{jj});
        ofile = [F, '_rej', X];
        if exist(wwu_buildpath(fpath, ofile), 'file') && ~Overwrite
            fprintf('Output file %s exists.  Skipping rejection\n', wwu_buildpath(fpath, ofile))
            continue;
        end
        
        EEG = pop_loadset('filepath', fpath, 'filename', fnames{jj});
        
        %now autoreject the worst of the trials
        if RejectICA ==1 
            chanlist = 1:size(EEG.icaact,1);
        else
            chanlist = 1:size(EEG.icawinv, 1);
        end
        
            
        if RejType(1)==1; [EEG, rejtrials] = pop_eegthresh(EEG, not(RejectICA), chanlist, -25, 25, EEG.xmin, EEG.xmax, 1, 0); end
        if RejType(2)==1; [EEG] = pop_rejkurt(EEG,not(RejectICA), chanlist, 6, 6, 0, 0,1); end
        if RejType(3)==1; [EEG] = pop_rejtrend(EEG, not(RejectICA),chanlist, EEG.pnts, .5, .3, 0, 0,0); end
        %  if RejType(1)==1; [EEG, rejtrials] = pop_eegthresh(EEG, 0, [1:length(EEG.icasphere)], -25, 25, EEG.xmin, EEG.xmax, 1, 0); end
        
        rejindx = zeros(3, EEG.trials);
        %get all trials to reject
        if RejectICA
            numRej = sum(EEG.reject.icarejkurt) + (sum(EEG.reject.icarejthresh)) + (sum(EEG.reject.icarejconst)) ;
            if RejType(1); rejindx (1,:) = EEG.reject.icarejthresh; end
            if RejType(2); rejindx(2,:) = EEG.reject.icarejkurt; end
            if RejType(3); rejindx(3,:) = EEG.reject.icarejconst; end
        else
            numRej = sum(EEG.reject.rejkurt) + (sum(EEG.reject.rejthresh)) + (sum(EEG.reject.rejconst));
            if RejType(1); rejindx (1,:) = EEG.reject.rejthresh;end
            if RejType(2); rejindx(2,:) = EEGreject.rejkurt;end
            if RejType(3); rejindx(3,:) = EEGreject.rejconst;end
            
        end
        
        rejcol(1,:) = EEG.reject.rejthreshcol;
        rejcol(2,:) = EEG.reject.rejkurtcol;
        rejcol(3,:) = EEG.reject.rejconstcol;
        
        trialmark = zeros(numRej, length(EEG.icasphere)+5);
        cnt = 0;
        for rj = 1:3
            rejtrl = find(rejindx(rj,:));
            if ~isempty(rejtrl)
                for tt = 1:length(rejtrl)
                    cnt = cnt + 1;
                    trialmark(cnt,1) = EEG.pnts * (rejtrl(tt) - 1);
                    trialmark(cnt,2) = EEG.pnts * rejtrl(tt);
                    trialmark(cnt,3:5) = rejcol(rj,:);
                end
            end
        end
        
        
        
        %show the result to the user and allow them to reject additional trials
        
        command =  'assignin(''caller'', ''myreject'', ''TMPREJ'')';
        
        examining = 1;
        
        while examining
            tmpdata = eeg_getdatact(EEG, 'component', [1:size(EEG.icaweights,1)]);
            eegplot( tmpdata, 'srate', EEG.srate, 'title', [fpath, fnames{jj}], ...
                'limits', [EEG.xmin EEG.xmax]*1000 , ...
                'winlength', 15, ...
                'ploteventdur', 'off', ...
                'position', scrnsze,...
                'command', command,...
                'winrej', trialmark);
            
            figh = gcf;
            uiwait(figh);
            myreject = evalin('base', 'TMPREJ');
            [tmprej tmprejE] = eegplot2trial(myreject, EEG.pnts, EEG.trials, [],[]);
            
            if ~isempty(tmprej)
                q = sprintf('Reject selected %i trials?', sum(tmprej));
                bttn = questdlg(q, 'Confirm Reject', 'Yes', 'No', 'Re-examine', 'Yes');
                examining = 0;
                
                switch bttn
                    case 'Yes'
                        fprintf('Rejecting trials and saving data...')
                        EEG = pop_rejepoch(EEG, tmprej, 0);
                        
                        EEG = pop_saveset(EEG, 'filepath', fpath, 'filename', ofile, 'savemode', 'onefile');
                        fprintf('done\n');
                        
                    case 'No'
                        fprintf('Skipping saving for %s', [fpath, fnames{jj}]);
                        continue
                    case 'Re-examine'
                        trialmark = myreject;
                        examining = 1;
                end
            end
            
        end
        
    end
end
set(0, 'units', unt);
delete(statusbar);
