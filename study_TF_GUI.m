function h = study_TF_GUI(study, filenames)

p = plot_params;

scrsize = get(0, 'ScreenSize');
Wdth = 450; Hght = 300;
Bttn_HalfWidth = 12;
Bttn_HalfHeight = 18;
LBHeight = Hght * .95;

%setup the main figure window
handles.figure = uifigure;
h = handles.figure;

set(handles.figure,...
    'Color', p.backcolor, ...
    'Name', 'Time Frequency Calculation',...
    'NumberTitle', 'off',...
    'Position', [(scrsize(3)-Wdth)/2,(scrsize(4)-Hght)/2,Wdth,Hght],...
    'Resize', 'off',...
    'menubar', 'none',...
    'WindowStyle', 'modal');

%*************************************************************************
%start at the bottom with the buttons

handles.button_dotf = uibutton(...
    'Parent', handles.figure,...
    'Text', 'Compute',...
    'Position', [Wdth-p.buttonwidth-10, 5, p.buttonwidth, p.buttonheight],...
    'BackgroundColor', p.buttoncolor,...
    'FontColor', p.buttonfontcolor);

handles.button_test = uibutton(...
    'Parent', handles.figure,...
    'Text', 'Test',...
    'Position', [Wdth-(p.buttonwidth*2)-20, 5, p.buttonwidth, p.buttonheight],...
    'BackgroundColor', p.buttoncolor,...
    'FontColor', p.buttonfontcolor);

handles.button_cancel = uibutton(...
    'Parent', handles.figure,...
    'Text', 'Cancel',...
    'Position', [Wdth-(p.buttonwidth*3)-30, 5, p.buttonwidth, p.buttonheight],...
    'BackgroundColor', p.buttoncolor,...
    'FontColor', p.buttonfontcolor,...
    'ButtonPushedFcn', {@callback_close});

handles.check_removemean = uicheckbox(handles.figure, ...
    'Text', 'Remove mean from single trials.',...
    'Value', false,...
    'Position', [200, 50, 200, 20]);

handles.edit_baselinelow = uieditfield(handles.figure, ...
    'numeric',...
    'Value', 1.0,...
    'FontColor', p.textfieldfontcolor,...
    'BackgroundColor', p.textfieldbackcolor, ...
    'Position', [200, 90, 50, 25]);

handles.edit_baselinehigh = uieditfield(handles.figure, ...
    'numeric',...
    'Value', 0,...
    'FontColor', p.textfieldfontcolor,...
    'BackgroundColor', p.textfieldbackcolor, ...
    'Position', [260, 90, 50, 25]);

handles.check_prestim = uicheckbox(handles.figure, ...
    'Value', true, ...,...
    'Text', 'Use prestim',...
    'Position', [320, 90, 100, 25]);

uilabel('Parent', handles.figure, ...
    'Text', sprintf('Baseline range [min max]'),...
    'HorizontalAlignment', 'left', ...
    'BackGroundColor', p.backcolor, ...
    'Position', [20, 95, 150, 20]);

handles.edit_freqslow = uieditfield(handles.figure, ...
    'numeric',...
    'Value', 1,...
    'FontColor', p.textfieldfontcolor,...
    'BackgroundColor', p.textfieldbackcolor, ...
    'Position', [200, 130, 50, 25]);

handles.edit_freqshigh = uieditfield(handles.figure, ...
    'numeric',...
    'Value', 50,...
    'FontColor', p.textfieldfontcolor,...
    'BackgroundColor', p.textfieldbackcolor, ...
    'Position', [260, 130, 50, 25]);

handles.check_deffreq = uicheckbox(handles.figure, ...
    'Value', true, ...,...
    'Text', 'Use defaults',...
    'Position', [320, 130, 100, 25]);

uilabel('Parent', handles.figure, ...
    'Text', sprintf('Frequency range (Hz) [min max]'),...
    'HorizontalAlignment', 'left', ...
    'BackGroundColor', p.backcolor, ...
    'Position', [20, 130, 180, 20]);

handles.edit_winsize = uieditfield(handles.figure, ...
    'numeric',...
    'Value', 256,...
    'FontColor', p.textfieldfontcolor,...
    'BackgroundColor', p.textfieldbackcolor, ...
    'Position', [200, 165, 110, 25],...
    'HorizontalAlignment','center');

handles.check_winsize = uicheckbox(handles.figure, ...
    'Value', true, ...,...
    'Text', 'Use defaults',...
    'Position', [320, 165, 100, 25]);

uilabel('Parent', handles.figure, ...
    'Text', sprintf('Window size (samples)'),...
    'HorizontalAlignment', 'left', ...
    'BackGroundColor', p.backcolor, ...
    'Position', [20, 165, 180, 20]);


%*********************************

handles.edit_cycles = uieditfield(handles.figure, ...
    'numeric',...
    'Value', 3,...
    'FontColor', p.textfieldfontcolor,...
    'BackgroundColor', p.textfieldbackcolor, ...
    'Position', [200, 200, 50, 25]);

handles.edit_cycleschange = uieditfield(handles.figure, ...
    'numeric',...
    'Value', 0.8,...
    'FontColor', p.textfieldfontcolor,...
    'BackgroundColor', p.textfieldbackcolor, ...
    'Position', [260, 200, 50, 25]);

handles.check_usefft = uicheckbox(handles.figure, ...
    'Value', false, ...,...
    'Text', 'Use FFT',...
    'Position', [320, 200, 100, 25]);

uilabel('Parent', handles.figure, ...
    'Text', sprintf('Wavelet Cycles [start, fact/end]'),...
    'HorizontalAlignment', 'left', ...
    'BackGroundColor', p.backcolor, ...
    'Position', [20, 200, 180, 20]);


handles.edit_testchannel = uieditfield(handles.figure, ...
    'numeric',...
    'Value', 32,...
    'FontColor', p.textfieldfontcolor,...
    'BackgroundColor', p.textfieldbackcolor, ...
    'Position', [200, 235, 110, 25],...
    'HorizontalAlignment','center');


uilabel('Parent', handles.figure, ...
    'Text', sprintf('Channel number for testing'),...
    'HorizontalAlignment', 'left', ...
    'BackGroundColor', p.backcolor, ...
    'Position', [20, 235, 180, 20]);



handles.button_dotf.ButtonPushedFcn = {@callback_calculateTF, handles, filenames, study, false};
handles.button_test.ButtonPushedFcn = {@callback_calculateTF, handles, filenames, study, true};
%**************************************************************************
function p = getParameters(h)
%retrieve the user parameters

    p.testChan = h.edit_testchannel.Value;
    p.useFFT = h.check_usefft.Value;
    if p.useFFT
        p.cycles = 0;
    else
        p.cycles = [h.edit_cycles.Value, h.edit_cycleschange.Value];
    end

   p.defWinsize = h.check_winsize.Value;
   p.winsize = h.edit_winsize.Value;
  
    
    p.defFreq = h.check_deffreq.Value;
    p.freqs      = [h.edit_freqslow.Value, h.edit_freqshigh.Value];  

    p.preStim = h.check_prestim.Value;
    p.baseline = [h.edit_baselinelow.Value, h.edit_baselinehigh.Value];
   
    p.remMean = h.check_removemean.Value;
    


%**************************************************************************
function callback_close(hObject, eventdata)
closereq();

function callback_calculateTF(hO)
%**********************************************
function callback_calculateTF(hObject, eventdata, h, filenames, study, runTest)



    file_id = '';
    owrite = false;
    
    p = getParameters(h);
    cmd = '[ersp, itc, powbase, times, freqs, erspboot, itcboot, tfdata] = newtimef(';
    cmd = [cmd, 'data, size(data,2), [EEG.xmin * 1000, EEG.xmax * 1000], EEG.srate, p.cycles'];

    if p.remMean
        cmd = [cmd, ', ''rmerp'', ''on'''];
    end
    if ~p.defWinsize
        cmd = [cmd, ', ''winsize'', p.winsize'];
    end

    if ~p.defFreq
        cmd = [cmd, '''freqs'', p.freqs'];
    end

    if ~p.preStim
        cmd = [cmd, '''baseline'', p.baseline'];
    end

    cmd = [cmd, ');'];

    

    try 
        if runTest
            EEGIn = wwu_LoadEEGFile(filenames{jj});
            fprintf('converting data to time frequencie\n');
            data = squeeze(EEGIn.data(p.testChannel, :,:));
            feval(cmd);
            figure("ERSP test");
            scale = [min(min(ersp)), max(max(ersp))];
            imagesc(ersp, scale);
        else
        %set a progress bar
        pbar = uiprogressdlg(h.figure,...
            'Title', 'computing time to time frequency',...
            'ShowPercentage', 'on');
       
        option = 0;
        nfile = length(filenames);
           
            for jj = 1:nfile
                [path, file, ext] = fileparts(filenames{jj});
                if owrite
                    outfilename = file;
                    ext = '.tfq';
    
                else
                    [file_id, option,writeflag] = wwu_verifySaveFile(path, file, file_id, ext, option);
                    if option == 3 && ~writeflag
                        fprintf('skipping existing file...\n')
                        continue;
                    else
                        outfilename = [file, file_id];
                    end
                end
                
                TFData = [];
                EEGIn = wwu_LoadEEGFile(filenames{jj});
                fprintf('converting data to time frequencie\n');
       
                for ch = 1:EEGIn.nbchan
                    data = squeeze(EEGIn.data(ch,:,:));
                    eval(cmd);
                    if ch == 1
                        TFData.times = times;
                        TFData.freqs = freqs;
                        TFData.chanlocs = EEGIn.chanlocs;
                        TFData.ntrials = size(EEGIn.data, 3);
                        TFData.ersp = zeros(EEGIn.nbchan, times, freqs);
    
                    end
                    TFData.ersp(ch, :, :) = ersp;
                end
    
                newfile = fullfile(path, [outfilename, ext]);
                save(newfile, TFData);
            
                pbar.Value  = jj/nfile;
        
            end
            
            clear EEGIn
            close(pbar)
        
       
            closereq();
        end
    catch ME
        close(pbar);
        closereq();
        rethrow(ME)
    end

