function h = study_TF_GUI(study, filenames)

p = plot_params;

scrsize = get(0, 'ScreenSize');
Wdth = 450; Hght = 300;
Bttn_HalfWidth = 12;
Bttn_HalfHeight = 18;
LBHeight = Hght * .95;

%setup the main figure window
handles.figure = uifigure;
h = handles.figure;

EEG = wwu_LoadEEGFile(filenames{1});
EEG.data = [];
handles.EEG = EEG;  %store this so we have access to sample rate etc.

DEFAULT_CYCLES = [3,1];
DEFAULT_WINSIZE = 2^nextpow2([EEG.pnts /8]);
DEFAULT_FREQS = [EEG.srate/DEFAULT_WINSIZE * DEFAULT_CYCLES(1), 50];
if EEG.xmin < 0
    DEFAULT_BASELINE = [EEG.xmin, 0] * 1000;
else
    DEFAULT_BASELINE = [EEG.xmin, EEG.xmax] * 1000;
end
[~,fname,~] = fileparts(filenames{1});
DEFAULT_OUTFILE = [fname, '_AVG_ERPS'];

set(handles.figure,...
    'Color', p.backcolor, ...
    'Name', 'Time Frequency Calculation',...
    'NumberTitle', 'off',...
    'Position', [(scrsize(3)-Wdth)/2,(scrsize(4)-Hght)/2,Wdth,Hght],...
    'Resize', 'off',...
    'menubar', 'none',...
    'WindowStyle', 'modal');

%*************************************************************************
%start at the bottom with the buttons

handles.button_dotf = uibutton(...
    'Parent', handles.figure,...
    'Text', 'Compute',...
    'Position', [Wdth-p.buttonwidth-10, 5, p.buttonwidth, p.buttonheight],...
    'BackgroundColor', p.buttoncolor,...
    'FontColor', p.buttonfontcolor);

handles.button_test = uibutton(...
    'Parent', handles.figure,...
    'Text', 'Test',...
    'Position', [Wdth-(p.buttonwidth*2)-20, 5, p.buttonwidth, p.buttonheight],...
    'BackgroundColor', p.buttoncolor,...
    'FontColor', p.buttonfontcolor);

handles.button_cancel = uibutton(...
    'Parent', handles.figure,...
    'Text', 'Cancel',...
    'Position', [Wdth-(p.buttonwidth*3)-30, 5, p.buttonwidth, p.buttonheight],...
    'BackgroundColor', p.buttoncolor,...
    'FontColor', p.buttonfontcolor,...
    'ButtonPushedFcn', {@callback_close});

handles.check_removemean = uicheckbox(handles.figure, ...
    'Text', 'Remove mean from single trials.',...
    'Value', false,...
    'Position', [200, 50, 200, 20]);

handles.edit_baselinelow = uieditfield(handles.figure, ...
    'numeric',...
    'Value', DEFAULT_BASELINE(1),...
    'FontColor', p.textfieldfontcolor,...
    'BackgroundColor', p.textfieldbackcolor, ...
    'Position', [200, 90, 50, 25]);

handles.edit_baselinehigh = uieditfield(handles.figure, ...
    'numeric',...
    'Value', DEFAULT_BASELINE(2),...
    'FontColor', p.textfieldfontcolor,...
    'BackgroundColor', p.textfieldbackcolor, ...
    'Position', [260, 90, 50, 25]);

handles.check_prestim = uicheckbox(handles.figure, ...
    'Value', true, ...,...
    'Text', 'Use prestim',...
    'Position', [320, 90, 100, 25]);

uilabel('Parent', handles.figure, ...
    'Text', sprintf('Baseline range [min max]'),...
    'HorizontalAlignment', 'left', ...
    'BackGroundColor', p.backcolor, ...
    'Position', [20, 95, 150, 20]);

handles.edit_freqslow = uieditfield(handles.figure, ...
    'numeric',...
    'Value', DEFAULT_FREQS(1),...
    'FontColor', p.textfieldfontcolor,...
    'BackgroundColor', p.textfieldbackcolor, ...
    'Position', [200, 130, 50, 25]);

handles.edit_freqshigh = uieditfield(handles.figure, ...
    'numeric',...
    'Value', DEFAULT_FREQS(2),...
    'FontColor', p.textfieldfontcolor,...
    'BackgroundColor', p.textfieldbackcolor, ...
    'Position', [260, 130, 50, 25]);

handles.check_deffreq = uicheckbox(handles.figure, ...
    'Value', false, ...,...
    'Text', 'Use defaults',...
    'Position', [320, 130, 100, 25]);

uilabel('Parent', handles.figure, ...
    'Text', sprintf('Frequency range (Hz) [min max]'),...
    'HorizontalAlignment', 'left', ...
    'BackGroundColor', p.backcolor, ...
    'Position', [20, 130, 180, 20]);

handles.edit_winsize = uieditfield(handles.figure, ...
    'numeric',...
    'Value', DEFAULT_WINSIZE,...
    'FontColor', p.textfieldfontcolor,...
    'BackgroundColor', p.textfieldbackcolor, ...
    'Position', [200, 165, 110, 25],...
    'HorizontalAlignment','center');

handles.check_winsize = uicheckbox(handles.figure, ...
    'Value', false, ...,...
    'Text', 'Use defaults',...
    'Position', [320, 165, 100, 25]);

uilabel('Parent', handles.figure, ...
    'Text', sprintf('Window size (samples)'),...
    'HorizontalAlignment', 'left', ...
    'BackGroundColor', p.backcolor, ...
    'Position', [20, 165, 180, 20]);


%*********************************

handles.edit_cycles = uieditfield(handles.figure, ...
    'numeric',...
    'Value', DEFAULT_CYCLES(1),...
    'FontColor', p.textfieldfontcolor,...
    'BackgroundColor', p.textfieldbackcolor, ...
    'Position', [200, 200, 50, 25]);

handles.edit_cycleschange = uieditfield(handles.figure, ...
    'numeric',...
    'Value', DEFAULT_CYCLES(2),...
    'FontColor', p.textfieldfontcolor,...
    'BackgroundColor', p.textfieldbackcolor, ...
    'Position', [260, 200, 50, 25]);

handles.check_usefft = uicheckbox(handles.figure, ...
    'Value', false, ...,...
    'Text', 'Use FFT',...
    'Position', [320, 200, 100, 25]);

uilabel('Parent', handles.figure, ...
    'Text', sprintf('Wavelet Cycles [start, fact/end]'),...
    'HorizontalAlignment', 'left', ...
    'BackGroundColor', p.backcolor, ...
    'Position', [20, 200, 180, 20]);

handles.edit_testchannel = uieditfield(handles.figure, ...
    'numeric',...
    'Value', 32,...
    'FontColor', p.textfieldfontcolor,...
    'BackgroundColor', p.textfieldbackcolor, ...
    'Position', [200, 235, 110, 25],...
    'HorizontalAlignment','center');

uilabel('Parent', handles.figure, ...
    'Text', sprintf('Channel number for testing'),...
    'HorizontalAlignment', 'left', ...
    'BackGroundColor', p.backcolor, ...
    'Position', [20, 235, 180, 20]);

handles.edit_outfile = uieditfield(handles.figure,...
    'text',...
    'Value', DEFAULT_OUTFILE,...
    'HorizontalAlignment','Left',...
    'BackgroundColor',p.textfieldbackcolor,...
    'FontColor',p.textfieldfontcolor,...
    'Position', [200, 270, 300, 25]);

uilabel('Parent', handles.figure, ...
    'Text', sprintf('Output file name'),...
    'HorizontalAlignment', 'left', ...
    'BackGroundColor', p.backcolor, ...
    'Position', [20, 270, 180, 20]);



handles.button_dotf.ButtonPushedFcn = {@callback_calculateTF, handles, filenames, study, false};
handles.button_test.ButtonPushedFcn = {@callback_calculateTF, handles, filenames, study, true};
%**************************************************************************
function p = getParameters(h)
%retrieve the user parameters

p.testChannel = h.edit_testchannel.Value;
p.useFFT = h.check_usefft.Value;
if p.useFFT
    p.cycles = 0;
else
    p.cycles = [h.edit_cycles.Value, h.edit_cycleschange.Value];
end

p.defWinsize = h.check_winsize.Value;
p.winsize = h.edit_winsize.Value;


p.defFreq = h.check_deffreq.Value;
p.freqs      = [h.edit_freqslow.Value, h.edit_freqshigh.Value];

p.preStim = h.check_prestim.Value;
p.baseline = [h.edit_baselinelow.Value, h.edit_baselinehigh.Value];

p.remMean = h.check_removemean.Value;


%**************************************************************************
function p = checkParams(p, filename)

%**************************************************************************
function callback_close(hObject, eventdata)
closereq();

%**********************************************
function callback_calculateTF(hObject, eventdata, h, filenames, study, runTest)


exclude_badtrials = true;
exclude_badcomps = true;
exclude_badsubjs = true;


p = getParameters(h);
p.runtest = runTest;  %if true only a single channel will be calculated

%TFData = struct();  %will hold the data for all subjects

%output this to the  across subject folder
study_path = study_GetEEGPath;
outdir = wwu_buildpath(study_path, study.path, 'across subject');
%create the output directory
if ~exist(outdir, 'Dir')
    mkdir(outdir)
end

outfile = h.edit_outfile.Value;
if isempty(outfile)
    msgbox('Please enter an output filename.')
    return
end

try

    pbar = uiprogressdlg(h.figure,...
        'Title', 'computing ersp',...
        'ShowPercentage', 'on');

    if runTest
        EEGIn = wwu_LoadEEGFile(filenames{1});
        fprintf('converting data to time frequency\n');
        ersp = wwu_tf(p, EEGIn);
    else
        %set a progress bar
    
        nfile = length(filenames);

        for jj = 1:nfile
            EEGIn = wwu_LoadEEGFile(filenames{jj});

            if exclude_badtrials
                pbar.Message = 'Removing bad trials';
                btrials = study_GetBadTrials(EEGIn);
                EEGIn = pop_rejepoch(EEGIn, btrials,0);
                %for some reason removing hte epochs scrambles the order of the
                %events so now I have to go in and make sure they are correct.
                EEGIn = wwu_fix_eventmarkers(EEGIn);
            end
            if exclude_badcomps && isfield(EEGIn, 'icasphere')
                pbar.Message = 'Removing bad components';
                EEGIn = pop_subcomp(EEGIn, [], 0, 0);
            end

            pbar.Message = 'Computing ERSP for all channels and conditions';
            
            %pass the data to the lower level routine that computes ersp on
            %the conditions and channels

            subTFData = wwu_tf(p, EEGIn);
            if jj == 1 
                %allocate space for all the ersp data
                TFData.indiv_ersp = zeros(nfile, subTFData.nchan, length(subTFData.freqs), length(subTFData.times), subTFData.ncond);
                TFData.times = subTFData.times;
                TFData.freqs = subTFData.freqs;
                TFData.chanlocs = EEGIn.chanlocs;
                TFData.bindesc = subTFData.bindesc;
                TFData.ncond = subTFData.ncond;
                TFData.nchan = subTFData.nchan;
            end
            TFData.indiv_ersp(jj, :,:,:,:) = subTFData.ersp;
            TFData.erp_file{jj} = filenames{jj};
           
            pbar.Value  = jj/nfile;


        end

        %figure out which participants are good and bad
        sbjinave = find(contains({study.subject.status}, 'good'));

        %compute the grand average
        grand = squeeze(mean(TFData.indiv_ersp(sbjinave,:,:,:,:), 1));
        TFData.grand_ersp  = grand;


        newfile = fullfile(outdir, [outfile, '.ersp']);
        save(newfile, 'TFData');

        clear EEGIn
        close(pbar)


        closereq();
    end
catch ME
    close(pbar);
    closereq();
    rethrow(ME)
end


